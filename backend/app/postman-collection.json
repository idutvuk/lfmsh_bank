{
	"info": {
		"_postman_id": "851c87c4-229e-412a-ae53-f33e7f838b08",
		"name": "lfmsh bank",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38672000"
	},
	"item": [
		{
			"name": "auth",
			"item": [
				{
					"name": "Auth: obtain student JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Проверяем, что логин успешен",
									"pm.test(\"Status 200\", () => pm.response.to.have.status(200));",
									"let json = pm.response.json();",
									"// pm.expect(json.access).to.eql(\"mocked-access-token\");",
									"// pm.expect(json.refresh).to.eql(\"mocked-refresh-token\");",
									"pm.environment.set(\"studentAccessToken\", json.access);",
									"pm.environment.set(\"studentRefreshToken\", json.refresh);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"girik\",\n    \"password\": \"r\"\n}"
						},
						"url": {
							"raw": "{{apiV1}}auth/jwt/create/",
							"host": [
								"{{apiV1}}auth"
							],
							"path": [
								"jwt",
								"create",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth: obtain staff JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Проверяем, что логин успешен",
									"pm.test(\"Status 200\", () => pm.response.to.have.status(200));",
									"let json = pm.response.json();",
									"// pm.expect(json.access).to.eql(\"mocked-access-token\");",
									"// pm.expect(json.refresh).to.eql(\"mocked-refresh-token\");",
									"pm.environment.set(\"staffAccessToken\", json.access);",
									"pm.environment.set(\"staffRefreshToken\", json.refresh);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"girix\",\n    \"password\": \"r\"\n}"
						},
						"url": {
							"raw": "{{apiV1}}auth/jwt/create/",
							"host": [
								"{{apiV1}}auth"
							],
							"path": [
								"jwt",
								"create",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth: refresh JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Проверяем, что обновление успешно",
									"pm.test(\"Status 200\", () => pm.response.to.have.status(200));",
									"let json = pm.response.json();",
									"pm.test(\"Has access token\", () => {",
									"    pm.expect(json).to.have.property('access');",
									"});",
									"pm.environment.set(\"studentAccessToken\", json.access);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refresh\": \"{{studentRefreshToken}}\"\n}"
						},
						"url": {
							"raw": "{{apiV1}}auth/jwt/refresh/",
							"host": [
								"{{apiV1}}auth"
							],
							"path": [
								"jwt",
								"refresh",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "user data",
			"item": [
				{
					"name": "GET student data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
									"const json = pm.response.json();",
									"pm.test(\"Has user fields\", () => {",
									"    pm.expect(json).to.include.keys('username','name','balance','expected_penalty','counters');",
									"});",
									"pm.test(\"Counters is an array\", () => {",
									"    pm.expect(json.counters).to.be.an('array');",
									"});",
									"pm.test(\"Each counter has required props\", () => {",
									"    json.counters.forEach(c => {",
									"        pm.expect(c).to.have.all.keys('counter_name','value','max_value');",
									"        pm.expect(c.counter_name).to.be.a('string');",
									"        pm.expect(c.value).to.be.a('number');",
									"        pm.expect(c.max_value).to.be.a('number');",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{studentAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiV1}}users/me/",
							"host": [
								"{{apiV1}}users"
							],
							"path": [
								"me",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "GET staff data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
									"const json = pm.response.json();",
									"pm.test(\"Has user fields\", () => {",
									"    pm.expect(json).to.include.keys('username','name','balance','expected_penalty','counters');",
									"});",
									"pm.test(\"Counters is an array\", () => {",
									"    pm.expect(json.counters).to.be.an('array');",
									"});",
									"pm.test(\"Each counter has required props\", () => {",
									"    json.counters.forEach(c => {",
									"        pm.expect(c).to.have.all.keys('counter_name','value','max_value');",
									"        pm.expect(c.counter_name).to.be.a('string');",
									"        pm.expect(c.value).to.be.a('number');",
									"        pm.expect(c.max_value).to.be.a('number');",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{staffAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiV1}}users/me/",
							"host": [
								"{{apiV1}}users"
							],
							"path": [
								"me",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "GET users list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
									"const json = pm.response.json();",
									"pm.test(\"Response is an array\", () => {",
									"    pm.expect(json).to.be.an('array');",
									"});",
									"",
									"if (json.length > 0) {",
									"    pm.test(\"Each user has required fields\", () => {",
									"        pm.expect(json[0]).to.have.all.keys('id', 'username', 'name', 'party', 'staff', 'balance');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{staffAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiV1}}users/",
							"host": [
								"{{apiV1}}users"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "transactions",
			"item": [
				{
					"name": "GET transactions list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
									"const json = pm.response.json();",
									"pm.test(\"Response is an array\", () => {",
									"    pm.expect(json).to.be.an('array');",
									"});",
									"",
									"if (json.length > 0) {",
									"    pm.test(\"Each transaction has required fields\", () => {",
									"        pm.expect(json[0]).to.include.keys('id', 'author', 'description', 'type', 'status', 'date_created', 'receivers');",
									"        pm.expect(json[0].receivers).to.be.an('array');",
									"    });",
									"    ",
									"    if (json[0].receivers.length > 0) {",
									"        pm.test(\"Each receiver has required fields\", () => {",
									"            const receiver = json[0].receivers[0];",
									"            pm.expect(receiver).to.include.keys('username', 'bucks', 'certs', 'lab', 'lec', 'sem', 'fac');",
									"        });",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{staffAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiV1}}transactions/",
							"host": [
								"{{apiV1}}transactions"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "GET transaction by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200 or 404\", () => {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const json = pm.response.json();",
									"    pm.test(\"Transaction has required fields\", () => {",
									"        pm.expect(json).to.include.keys('id', 'author', 'description', 'type', 'status', 'date_created', 'receivers');",
									"        pm.expect(json.receivers).to.be.an('array');",
									"    });",
									"    ",
									"    if (json.receivers.length > 0) {",
									"        pm.test(\"Each receiver has required fields\", () => {",
									"            const receiver = json.receivers[0];",
									"            pm.expect(receiver).to.include.keys('username', 'bucks', 'certs', 'lab', 'lec', 'sem', 'fac');",
									"        });",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{staffAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiV1}}transactions/1",
							"host": [
								"{{apiV1}}transactions"
							],
							"path": [
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create fine transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
									"const json = pm.response.json();",
									"pm.test(\"Transaction created\", () => {",
									"    pm.expect(json).to.include.keys('id', 'author', 'description', 'type', 'status', 'date_created', 'receivers');",
									"    pm.expect(json.type).to.eql('fine');",
									"});",
									"",
									"// Store the transaction ID for later tests",
									"if (json.id) {",
									"    pm.environment.set(\"lastTransactionId\", json.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{staffAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"fine\",\n    \"description\": \"Тестовый штраф\",\n    \"recipients\": [\n        {\n            \"id\": 1,\n            \"amount\": -5\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{apiV1}}transactions/create/",
							"host": [
								"{{apiV1}}transactions"
							],
							"path": [
								"create",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create general transaction (bonus)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
									"const json = pm.response.json();",
									"pm.test(\"Transaction created\", () => {",
									"    pm.expect(json).to.include.keys('id', 'author', 'description', 'type', 'status', 'date_created', 'receivers');",
									"    pm.expect(json.type).to.eql('general');",
									"});",
									"",
									"// Store the transaction ID for later tests",
									"if (json.id) {",
									"    pm.environment.set(\"lastTransactionId\", json.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{staffAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"general\",\n    \"description\": \"Бонус за помощь\",\n    \"recipients\": [\n        {\n            \"id\": 1,\n            \"amount\": 10\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{apiV1}}transactions/create/",
							"host": [
								"{{apiV1}}transactions"
							],
							"path": [
								"create",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create attendance transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
									"const json = pm.response.json();",
									"pm.test(\"Transaction created\", () => {",
									"    pm.expect(json).to.include.keys('id', 'author', 'description', 'type', 'status', 'date_created', 'receivers');",
									"    pm.expect(json.type).to.eql('fac_attend');",
									"});",
									"",
									"// Store the transaction ID for later tests",
									"if (json.id) {",
									"    pm.environment.set(\"lastTransactionId\", json.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{staffAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"fac_attend\",\n    \"description\": \"Посещение факультатива\",\n    \"recipients\": [\n        {\n            \"id\": 1,\n            \"amount\": 0\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{apiV1}}transactions/create/",
							"host": [
								"{{apiV1}}transactions"
							],
							"path": [
								"create",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create P2P transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
									"const json = pm.response.json();",
									"pm.test(\"Transaction created\", () => {",
									"    pm.expect(json).to.include.keys('id', 'author', 'description', 'type', 'status', 'date_created', 'receivers');",
									"    pm.expect(json.type).to.eql('p2p');",
									"});",
									"",
									"// Store the transaction ID for later tests",
									"if (json.id) {",
									"    pm.environment.set(\"p2pTransactionId\", json.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{studentAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"p2p\",\n    \"description\": \"Перевод другу\",\n    \"recipients\": [\n        {\n            \"id\": 2,\n            \"amount\": 5\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{apiV1}}transactions/create/",
							"host": [
								"{{apiV1}}transactions"
							],
							"path": [
								"create",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Process transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
									"const json = pm.response.json();",
									"pm.test(\"Transaction processed\", () => {",
									"    pm.expect(json).to.include.keys('id', 'author', 'description', 'type', 'status', 'date_created', 'receivers');",
									"    pm.expect(json.status).to.eql('processed');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{staffAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{apiV1}}transactions/{{lastTransactionId}}/process",
							"host": [
								"{{apiV1}}transactions"
							],
							"path": [
								"{{lastTransactionId}}",
								"process"
							]
						}
					},
					"response": []
				},
				{
					"name": "Decline transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
									"const json = pm.response.json();",
									"pm.test(\"Transaction declined\", () => {",
									"    pm.expect(json).to.include.keys('id', 'author', 'description', 'type', 'status', 'date_created', 'receivers');",
									"    pm.expect(json.status).to.eql('declined');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{staffAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{apiV1}}transactions/{{p2pTransactionId}}/decline",
							"host": [
								"{{apiV1}}transactions"
							],
							"path": [
								"{{p2pTransactionId}}",
								"decline"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "statistics",
			"item": [
				{
					"name": "GET statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
									"const json = pm.response.json();",
									"pm.test(\"Statistics has required fields\", () => {",
									"    pm.expect(json).to.include.keys('avg_balance', 'total_balance');",
									"    pm.expect(json.avg_balance).to.be.a('number');",
									"    pm.expect(json.total_balance).to.be.a('number');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{staffAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiV1}}statistics/",
							"host": [
								"{{apiV1}}statistics"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "apiV1",
			"value": "http://localhost:8000/api/v1/",
			"type": "string"
		}
	]
}