{
	"info": {
		"_postman_id": "851c87c4-229e-412a-ae53-f33e7f838b08",
		"name": "lfmsh bank",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38672000"
	},
	"item": [
		{
			"name": "auth",
			"item": [
				{
					"name": "Auth: obtain student JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Проверяем, что логин успешен",
									"pm.test(\"Status 200\", () => pm.response.to.have.status(200));",
									"let json = pm.response.json();",
									"// pm.expect(json.access).to.eql(\"mocked-access-token\");",
									"// pm.expect(json.refresh).to.eql(\"mocked-refresh-token\");",
									"pm.environment.set(\"studentAccessToken\", json.access_token);",
									"pm.environment.set(\"studentRefreshToken\", json.refresh_token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "girik",
									"type": "text"
								},
								{
									"key": "password",
									"value": "r",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{apiV1}}auth/jwt/create/",
							"host": [
								"{{apiV1}}auth"
							],
							"path": [
								"jwt",
								"create",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth: obtain staff JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Проверяем, что логин успешен",
									"pm.test(\"Status 200\", () => pm.response.to.have.status(200));",
									"let json = pm.response.json();",
									"// pm.expect(json.access).to.eql(\"mocked-access-token\");",
									"// pm.expect(json.refresh).to.eql(\"mocked-refresh-token\");",
									"pm.environment.set(\"staffAccessToken\", json.access_token);",
									"pm.environment.set(\"staffRefreshToken\", json.refresh_token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "girix",
									"type": "text"
								},
								{
									"key": "password",
									"value": "r",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{apiV1}}auth/jwt/create/?username=girix&password=r",
							"host": [
								"{{apiV1}}auth"
							],
							"path": [
								"jwt",
								"create",
								""
							],
							"query": [
								{
									"key": "username",
									"value": "girix"
								},
								{
									"key": "password",
									"value": "r"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "user data",
			"item": [
				{
					"name": "GET student data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
									"const json = pm.response.json();",
									"pm.test(\"Has user fields\", () => {",
									"    pm.expect(json).to.include.keys('username','name','balance','expected_penalty','counters');",
									"});",
									"pm.test(\"Counters is an array\", () => {",
									"    pm.expect(json.counters).to.be.an('array');",
									"});",
									"pm.test(\"Each counter has required props\", () => {",
									"    json.counters.forEach(c => {",
									"        pm.expect(c).to.have.all.keys('counter_name','value','max_value');",
									"        pm.expect(c.counter_name).to.be.a('string');",
									"        pm.expect(c.value).to.be.a('number');",
									"        pm.expect(c.max_value).to.be.a('number');",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{studentAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiV1}}users/me/",
							"host": [
								"{{apiV1}}users"
							],
							"path": [
								"me",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "GET staff data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
									"const json = pm.response.json();",
									"pm.test(\"Has user fields\", () => {",
									"    pm.expect(json).to.include.keys('username','name','balance','expected_penalty','counters');",
									"});",
									"pm.test(\"Counters is an array\", () => {",
									"    pm.expect(json.counters).to.be.an('array');",
									"});",
									"pm.test(\"Each counter has required props\", () => {",
									"    json.counters.forEach(c => {",
									"        pm.expect(c).to.have.all.keys('counter_name','value','max_value');",
									"        pm.expect(c.counter_name).to.be.a('string');",
									"        pm.expect(c.value).to.be.a('number');",
									"        pm.expect(c.max_value).to.be.a('number');",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{staffAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiV1}}users/me/",
							"host": [
								"{{apiV1}}users"
							],
							"path": [
								"me",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "GET users list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
									"const json = pm.response.json();",
									"pm.test(\"Returns array of users\", () => {",
									"    pm.expect(json).to.be.an('array');",
									"    pm.expect(json.length).to.be.greaterThan(0);",
									"});",
									"pm.test(\"Each user has required properties\", () => {",
									"    json.forEach(user => {",
									"        pm.expect(user).to.have.all.keys('id', 'name', 'balance', 'staff');",
									"        pm.expect(user.id).to.be.a('number');",
									"        pm.expect(user.name).to.be.a('string');",
									"        pm.expect(user.balance).to.be.a('number');",
									"        pm.expect(user.staff).to.be.a('boolean');",
									"    });",
									"});",
									"pm.test(\"Contains both student and staff users\", () => {",
									"    const hasStaff = json.some(user => user.staff === true);",
									"    const hasStudents = json.some(user => user.staff === false);",
									"    pm.expect(hasStaff || hasStudents).to.be.true;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{staffAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiV1}}users/",
							"host": [
								"{{apiV1}}users"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "transactions",
			"item": [
				{
					"name": "create transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Created 201\", () => pm.response.to.have.status(201));",
									"var t = pm.response.json();",
									"pm.test(\"Transaction has id & status=created\", () => {",
									"    pm.expect(t).to.have.property('id');",
									"    pm.expect(t.status).to.eql('created');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{staffAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Бонус за экзамен\",\n  \"type_name\": \"fine\",\n  \"creation_map\": [\n    { \"username\": \"girik\", \"bucks\": 50, \"certs\": 0, \"lab\":0, \"lec\":0, \"sem\":0, \"fac\":0 }\n  ]\n}"
						},
						"url": {
							"raw": "{{apiV1}}transactions/",
							"host": [
								"{{apiV1}}transactions"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "O get my transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status OK\", () => pm.response.to.have.status(200));",
									"pm.test(\"Array of transactions\", () => pm.expect(pm.response.json()).to.be.an('array'));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{staffAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{apiV1}}transactions/?status=created",
							"host": [
								"{{apiV1}}transactions"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "status",
									"value": "created"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "healthcheck",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"should work\", () => pm.response.to.have.status(200))"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/health",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"health"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "localhost:8000",
			"type": "string"
		},
		{
			"key": "studentUsername",
			"value": "girik",
			"type": "string"
		},
		{
			"key": "studentPassword",
			"value": "r",
			"type": "string"
		},
		{
			"key": "staffUsername",
			"value": "girix",
			"type": "string"
		},
		{
			"key": "staffPassword",
			"value": "r",
			"type": "string"
		},
		{
			"key": "apiV1",
			"value": "{{baseUrl}}/api/v1/",
			"type": "string"
		}
	]
}