import { 
  AlertDialog,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel
} from "@/components/ui/alert-dialog"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Copy, Edit, X, Check } from "lucide-react"

type Receiver = {
  username: string
  bucks: number
  certs: number
  lab: number
  lec: number
  sem: number
  fac: number
}

type TransactionViewDialogProps = {
  open: boolean
  onOpenChange: (open: boolean) => void
  transaction: {
    id: number
    description: string
    author: string
    date_created: string
    status: string
    type: string
    receivers: Receiver[]
  }
  isStaff: boolean
  onCancel?: (transactionId: number) => void
  onEdit?: (transactionId: number) => void
  onDuplicate?: (transactionId: number) => void
  onApprove?: (transactionId: number) => void
}

export function TransactionViewDialog({
  open,
  onOpenChange,
  transaction,
  isStaff,
  onCancel,
  onEdit,
  onDuplicate,
  onApprove
}: TransactionViewDialogProps) {
  const formatDate = (dateString: string) => {
    const date = new Date(dateString)
    return date.toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'long',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    })
  }

  const getStatusBadge = (status: string) => {
    switch (status) {
      case "processed":
        return <Badge variant="default" className="bg-green-600 text-white">–û–¥–æ–±—Ä–µ–Ω–∞</Badge>
      case "declined":
        return <Badge variant="neutral" className="bg-red-600 text-white">–û—Ç–º–µ–Ω–µ–Ω–∞</Badge>
      case "substituted":
        return <Badge variant="neutral" className="bg-gray-600 text-white">–ó–∞–º–µ–Ω–µ–Ω–∞</Badge>
      default:
        return <Badge variant="neutral">–û–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è</Badge>
    }
  }

  const getTypeDisplayName = (type: string) => {
    const typeMap: Record<string, string> = {
      'p2p': '–ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É –ø–∏–æ–Ω–µ—Ä–∞–º–∏',
      'initial': '–ù–∞—á–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏',
      'staff_help': '–ü–æ–º–æ—â—å –ø–µ–¥—Å–æ—Å—Ç–∞–≤—É',
      'dining_services': '–°—Ç–æ–ª–æ–≤–∞—è',
      'table': '–ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã',
      'sem_attend': '–ü–æ—Å–µ—â–µ–Ω–∏–µ —Å–µ–º–∏–Ω–∞—Ä–∞',
      'workout': '–ó–∞—Ä—è–¥–∫–∞',
      'general': '–û–±—â–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è',
      'sport_event': '–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ',
      'activity': '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ',
      'olympiad': '–û–ª–∏–º–ø–∏–∞–¥–∞',
      'problem': '–†–µ—à–µ–Ω–∏–µ —É–±–æ–µ–∫',
      'exam': '–≠–∫–∑–∞–º–µ–Ω',
      'class_pass': '–ó–∞—á–µ—Ç –ø–æ –∫–ª–∞—Å—Å—É',
      'fac_attend': '–ü–æ—Å–µ—â–µ–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–∞—Ç–∏–≤–∞',
      'fac_pass': '–ó–∞—á–µ—Ç –ø–æ —Ñ–∞–∫—É–ª—å—Ç–∞—Ç–∏–≤—É',
      'lab': '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞',
      'lec_attend': '–ü–æ—Å–µ—â–µ–Ω–∏–µ –ª–µ–∫—Ü–∏–∏',
      'seminar': '–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Å–µ–º–∏–Ω–∞—Ä–∞',
      'purchase': '–ü–æ–∫—É–ø–∫–∞',
      'purchase_book': '–ü–æ–∫—É–ø–∫–∞ –∫–Ω–∏–≥–∏',
      'purchase_auction': '–ü–æ–∫—É–ø–∫–∞ –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–µ',
      'fine': '–®—Ç—Ä–∞—Ñ',
      'fine_lab': '–®—Ç—Ä–∞—Ñ –∑–∞ –ª–∞–±—ã',
      'fine_lecture': '–®—Ç—Ä–∞—Ñ –∑–∞ –ª–µ–∫—Ü–∏–∏',
      'fine_equatorial': '–≠–∫–≤–∞—Ç–æ—Ä–∏–∞–ª—å–Ω—ã–π —à—Ç—Ä–∞—Ñ',
      'fine_final': '–§–∏–Ω–∞–ª—å–Ω—ã–π —à—Ç—Ä–∞—Ñ',
      'fine_schedule': '–®—Ç—Ä–∞—Ñ –∑–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ',
      'fine_damage': '–®—Ç—Ä–∞—Ñ –∑–∞ –ø–æ—Ä—á—É –∏–º—É—â–µ—Å—Ç–≤–∞',
      'fine_moral': '–ú–æ—Ä–∞–ª—å–Ω—ã–π —à—Ç—Ä–∞—Ñ',
      'fine_language': '–®—Ç—Ä–∞—Ñ –∑–∞ —è–∑—ã–∫',
      'fine_safety': '–®—Ç—Ä–∞—Ñ –∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
      'tax': '–ù–∞–ª–æ–≥'
    }
    return typeMap[type] || type
  }

  const formatBalanceChange = (receiver: Receiver) => {
    const parts = []
    
    if (receiver.bucks !== 0) {
      parts.push(`${receiver.bucks >= 0 ? '+' : ''}${receiver.bucks}@`)
    }
    
    if (receiver.certs !== 0) {
      parts.push(`–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã: ${receiver.certs >= 0 ? '+' : ''}${receiver.certs}üïÆ`)
    }
    
    if (receiver.lab > 0) {
      parts.push(`–õ–∞–±—ã: +${receiver.lab}`)
    }
    
    if (receiver.lec > 0) {
      parts.push(`–õ–µ–∫—Ü–∏–∏: +${receiver.lec}`)
    }
    
    if (receiver.sem > 0) {
      parts.push(`–°–µ–º–∏–Ω–∞—Ä—ã: +${receiver.sem}`)
    }
    
    if (receiver.fac > 0) {
      parts.push(`–§–∞–∫—É–ª—å—Ç–∞—Ç–∏–≤—ã: +${receiver.fac}`)
    }
    
    return parts.length > 0 ? parts.join(', ') : '–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π'
  }

  const canCancel = isStaff && transaction.status === "created"
  const canApprove = isStaff && transaction.status === "created"
  const canEdit = isStaff
  const canDuplicate = isStaff

  return (
    <AlertDialog open={open} onOpenChange={onOpenChange}>
      <AlertDialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
        <AlertDialogHeader>
          <AlertDialogTitle className="flex items-center justify-between">
            <span>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #{transaction.id}</span>
            {getStatusBadge(transaction.status)}
          </AlertDialogTitle>
        </AlertDialogHeader>
        
        <div className="space-y-4">
          {/* –î–∞—Ç–∞ */}
          <div>
            <strong>–î–∞—Ç–∞:</strong> {formatDate(transaction.date_created)}
          </div>
          
          {/* –ê–≤—Ç–æ—Ä */}
          <div>
            <strong>–ê–≤—Ç–æ—Ä:</strong> {transaction.author}
          </div>
          
          {/* –¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ */}
          <div>
            <strong>–¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</strong> {getTypeDisplayName(transaction.type)}
          </div>
          
          {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
          {transaction.description && (
            <div>
              <strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong>
              <div className="mt-1 p-3 bg-muted rounded-lg">
                {transaction.description}
              </div>
            </div>
          )}
          
          {/* –ü–æ–ª—É—á–∞—Ç–µ–ª–∏ */}
          <div>
            <strong>–ü–æ–ª—É—á–∞—Ç–µ–ª–∏:</strong>
            <div className="mt-2 space-y-2">
              {transaction.receivers.map((receiver, index) => (
                <div key={index} className="p-3 border rounded-lg">
                  <div className="font-medium">{receiver.username}</div>
                  <div className="text-sm text-muted-foreground">
                    {formatBalanceChange(receiver)}
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>

        <AlertDialogFooter className="flex-col sm:flex-row gap-2">
          {isStaff && (
            <div className="flex gap-2 flex-wrap">
              {canApprove && (
                <Button
                  variant="default"
                  size="sm"
                  className="bg-green-600 text-white"
                  onClick={() => {
                    onApprove?.(transaction.id)
                    onOpenChange(false)
                  }}
                >
                  <Check className="w-4 h-4 mr-1" />
                  –û–¥–æ–±—Ä–∏—Ç—å
                </Button>
              )}
              
              {canCancel && (
                <Button
                  variant="neutral"
                  size="sm"
                  className="bg-red-600 text-white"
                  onClick={() => {
                    onCancel?.(transaction.id)
                    onOpenChange(false)
                  }}
                >
                  <X className="w-4 h-4 mr-1" />
                  –û—Ç–º–µ–Ω–∏—Ç—å
                </Button>
              )}
              
              {canEdit && (
                <Button
                  variant="neutral"
                  size="sm"
                  onClick={() => {
                    onEdit?.(transaction.id)
                    onOpenChange(false)
                  }}
                >
                  <Edit className="w-4 h-4 mr-1" />
                  –ò–∑–º–µ–Ω–∏—Ç—å
                </Button>
              )}
              
              {canDuplicate && (
                <Button
                  variant="neutral"
                  size="sm"
                  onClick={() => {
                    onDuplicate?.(transaction.id)
                    onOpenChange(false)
                  }}
                >
                  <Copy className="w-4 h-4 mr-1" />
                  –î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
                </Button>
              )}
            </div>
          )}
          
          <AlertDialogCancel asChild>
            <Button variant="neutral">–ó–∞–∫—Ä—ã—Ç—å</Button>
          </AlertDialogCancel>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  )
} 